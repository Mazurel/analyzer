plugins {
    alias(libs.plugins.jvm)
    alias(libs.plugins.ktfmt)

    // For nice standalone apps
    id 'com.github.johnrengelman.shadow' version '8.1.1'

    id 'application'
}

group = "org.analyzer.kotlin.console"

dependencies {
    testImplementation libs.kotlin.test.junit5
    testImplementation libs.junit.jupiter.engine

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // For nice TUI libraries
    implementation 'com.varabyte.kotter:kotter-jvm:1.1.2'

    implementation project(":core")
}

application {
    // Define the main class for the application.
    mainClass = 'org.analyzer.kotlin.console.AppKt'
}

shadowJar {
    archiveBaseName.set('console-frontend')
    archiveVersion.set('1.0')
    archiveClassifier.set('')
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

run {
    standardInput = System.in
}

def datasetsDir = file("data/loghub_2k/")
def potentialDatasets = datasetsDir.listFiles().findAll { it.isDirectory() }
def datasetBenchmarkTasks = []
potentialDatasets.each { dir ->
    def datasetName = dir.name
    def taskName = "performBenchmark${datasetName}"
    def benchmarkingTask = task(taskName, type: Exec) {
        commandLine 'python3', 'benchmark.py', datasetName
        standardOutput = new ByteArrayOutputStream()
    }
    benchmarkingTask.dependsOn build
    datasetBenchmarkTasks << benchmarkingTask
}

task performBenchmark {
    dependsOn datasetBenchmarkTasks

    group = "Benchmarks"
    description = "Benchmarks for all datasets"

    doLast {
        def outputFilePath = "benchmark_result.txt"
        def outputFile = file(outputFilePath).newOutputStream()
        def aggregatedResults = new ByteArrayOutputStream()
        datasetBenchmarkTasks.each {
            it.standardOutput.writeTo(aggregatedResults)
        }
        outputFile.write(aggregatedResults.toByteArray());
        outputFile.close()

        logger.lifecycle "All Datasets Aggregated into ${outputFilePath} !"
    }
}
